name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'terraform/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'terraform/**'
      - '.github/workflows/**'

permissions:
  contents: read
  security-events: write
  actions: read

env:
  GCP_REGION: us-west1
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID || 'duckdb-analytics-platform' }}
  PROJECT_NAME: duckdb-analytics

jobs:
  # Code Quality and Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Generate test data
      run: |
        cd backend/src
        MINIMAL_DATA=true python 01_data_generation.py
      env:
        PYTHONPATH: ${{ github.workspace }}/backend/src

    - name: Run Python tests
      run: |
        cd backend
        python -m pytest tests/ -v
      env:
        PYTHONPATH: ${{ github.workspace }}/backend/src

    - name: Run Frontend tests
      run: |
        cd frontend
        npm run test:ci
      env:
        CI: true

    - name: Run Backend linting
      run: |
        pip install flake8 black
        flake8 backend/src/
        black --check --diff backend/src/ --line-length 120

    - name: Run Frontend linting and type checking
      run: |
        cd frontend
        npm run type-check
        npm run lint

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    outputs:
      backend-image-tag: ${{ steps.backend-meta.outputs.tags }}
      frontend-image-tag: ${{ steps.frontend-meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

    - name: Extract metadata for backend
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.PROJECT_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.PROJECT_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          API_URL=${{ secrets.API_URL || 'http://localhost:8000' }}

  # GCP Terraform Plan
  terraform-plan-gcp:
    name: Terraform Plan (GCP)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.13.3

    - name: Terraform Format Check
      run: |
        cd terraform/gcp
        terraform fmt -check

    - name: Terraform Init
      run: |
        cd terraform/gcp
        terraform init

    - name: Terraform Validate
      run: |
        cd terraform/gcp
        terraform validate

    - name: Terraform Plan
      run: |
        cd terraform/gcp
        terraform plan \
          -var="project_id=${{ env.GCP_PROJECT_ID }}" \
          -var="environment=prod" \
          -var="region=${{ env.GCP_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="artifact_registry_repo_id=${{ env.PROJECT_NAME }}" \
          -out=tfplan
      env:
        TF_VAR_project_id: ${{ env.GCP_PROJECT_ID }}
        TF_VAR_region: ${{ env.GCP_REGION }}
        TF_VAR_project_name: ${{ env.PROJECT_NAME }}
        TF_VAR_artifact_registry_repo_id: ${{ env.PROJECT_NAME }}

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-gcp-${{ github.ref_name }}
        path: terraform/gcp/tfplan
        retention-days: 30

  # Deploy to GCP
  deploy-gcp:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    needs: [build, terraform-plan-gcp]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    outputs:
      backend-url: ${{ steps.terraform-outputs.outputs.backend-url }}
      frontend-url: ${{ steps.terraform-outputs.outputs.frontend-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.13.3
        terraform_wrapper: false

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-gcp-main
        path: terraform/gcp/

    - name: Terraform Init
      run: |
        cd terraform/gcp
        terraform init

    - name: Terraform Apply
      run: |
        cd terraform/gcp
        terraform apply -auto-approve tfplan

    - name: Get deployment outputs
      id: terraform-outputs
      run: |
        cd terraform/gcp
        echo "backend-url=$(terraform output -raw backend_url)" >> $GITHUB_OUTPUT
        echo "frontend-url=$(terraform output -raw frontend_url)" >> $GITHUB_OUTPUT
        echo "Load balancer URL: $(terraform output -raw frontend_url)"

    - name: Update Cloud Run Services
      run: |
        # Force new deployment to pick up latest images from Artifact Registry
        gcloud run services update ${{ env.PROJECT_NAME }}-backend \
          --region ${{ env.GCP_REGION }} \
          --image ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.PROJECT_NAME }}/backend:main-${{ github.sha }} \
          --quiet

        gcloud run services update ${{ env.PROJECT_NAME }}-frontend \
          --region ${{ env.GCP_REGION }} \
          --image ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.PROJECT_NAME }}/frontend:main-${{ github.sha }} \
          --quiet

    - name: Wait for deployment to complete
      run: |
        echo "Waiting for services to become available..."
        
        # Wait for backend service
        while ! gcloud run services describe ${{ env.PROJECT_NAME }}-backend \
          --region ${{ env.GCP_REGION }} \
          --format="value(status.conditions[0].status)" | grep -q "True"; do
          echo "Waiting for backend service..."
          sleep 10
        done
        
        # Wait for frontend service  
        while ! gcloud run services describe ${{ env.PROJECT_NAME }}-frontend \
          --region ${{ env.GCP_REGION }} \
          --format="value(status.conditions[0].status)" | grep -q "True"; do
          echo "Waiting for frontend service..."
          sleep 10
        done

    - name: Run smoke tests
      run: |
        # Test API health endpoint
        curl -f ${{ steps.terraform-outputs.outputs.backend-url }}/api/v1/health || curl -f ${{ steps.terraform-outputs.outputs.backend-url }}/health
        
        # Test frontend
        curl -f ${{ steps.terraform-outputs.outputs.frontend-url }}
      timeout-minutes: 5

    - name: Notify deployment success
      if: success() && github.event_name == 'push'
      run: |
        echo "🚀 Successfully deployed DuckDB Analytics to GCP!"
        echo "Backend URL: ${{ steps.terraform-outputs.outputs.backend-url }}"
        echo "Frontend URL: ${{ steps.terraform-outputs.outputs.frontend-url }}"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Failed to deploy DuckDB Analytics to GCP"
        echo "Check the logs above for details"

  # Cleanup old images
  cleanup-gcp:
    name: Cleanup Old Images (GCP)
    runs-on: ubuntu-latest
    needs: deploy-gcp
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Delete old Artifact Registry images
      run: |
        # Keep only the latest 10 images in each repository
        echo "Cleaning up old backend images..."
        gcloud artifacts docker images list \
          ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.PROJECT_NAME }}/backend \
          --sort-by="~CREATE_TIME" \
          --limit=999 \
          --format="value(IMAGE)" | \
        tail -n +11 | \
        xargs -r -I {} gcloud artifacts docker images delete {} --quiet || true

        echo "Cleaning up old frontend images..."  
        gcloud artifacts docker images list \
          ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.PROJECT_NAME }}/frontend \
          --sort-by="~CREATE_TIME" \
          --limit=999 \
          --format="value(IMAGE)" | \
        tail -n +11 | \
        xargs -r -I {} gcloud artifacts docker images delete {} --quiet || true

        echo "Cleanup completed successfully!"