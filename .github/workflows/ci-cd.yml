name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'terraform/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'terraform/**'
      - '.github/workflows/**'

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: duckdb-analytics

jobs:
  # Code Quality and Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Generate test data
      run: |
        cd backend/src
        MINIMAL_DATA=true python 01_data_generation.py
      env:
        PYTHONPATH: ${{ github.workspace }}/backend/src

    - name: Run Python tests
      run: |
        cd backend
        python -m pytest tests/ -v
      env:
        PYTHONPATH: ${{ github.workspace }}/backend/src

    - name: Run Frontend tests
      run: |
        cd frontend
        npm run test:ci
      env:
        CI: true

    - name: Run Backend linting
      run: |
        pip install flake8 black
        flake8 backend/src/
        black --check --diff backend/src/ --line-length 120

    - name: Run Frontend linting and type checking
      run: |
        cd frontend
        npm run type-check
        npm run lint

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    outputs:
      backend-image-tag: ${{ steps.backend-meta.outputs.tags }}
      frontend-image-tag: ${{ steps.frontend-meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract metadata for backend
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          API_URL=${{ secrets.API_URL || 'http://localhost:8000' }}

  # Terraform Plan
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Format Check
      run: |
        cd terraform/aws
        terraform fmt -check

    - name: Terraform Init
      run: |
        cd terraform/aws
        terraform init

    - name: Terraform Validate
      run: |
        cd terraform/aws
        terraform validate

    - name: Terraform Plan
      run: |
        cd terraform/aws
        terraform plan -var="environment=${{ github.ref_name }}" -out=tfplan
      env:
        TF_VAR_project_name: ${{ env.PROJECT_NAME }}
        TF_VAR_aws_region: ${{ env.AWS_REGION }}

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.ref_name }}
        path: terraform/aws/tfplan
        retention-days: 30

  # Deploy to AWS (only on main branch)
  deploy-aws:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [build, terraform-plan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-main
        path: terraform/aws/

    - name: Terraform Init
      run: |
        cd terraform/aws
        terraform init

    - name: Terraform Apply
      run: |
        cd terraform/aws
        terraform apply -auto-approve tfplan

    - name: Get deployment outputs
      id: terraform-outputs
      run: |
        cd terraform/aws
        echo "load-balancer-dns=$(terraform output -raw load_balancer_dns_name)" >> $GITHUB_OUTPUT
        echo "application-url=$(terraform output -raw application_url)" >> $GITHUB_OUTPUT

    - name: Update ECS Services
      run: |
        # Force new deployment to pick up latest images
        aws ecs update-service \
          --cluster ${{ env.PROJECT_NAME }}-cluster \
          --service ${{ env.PROJECT_NAME }}-backend \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

        aws ecs update-service \
          --cluster ${{ env.PROJECT_NAME }}-cluster \
          --service ${{ env.PROJECT_NAME }}-frontend \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

    - name: Wait for deployment to complete
      run: |
        echo "Waiting for backend service to stabilize..."
        aws ecs wait services-stable \
          --cluster ${{ env.PROJECT_NAME }}-cluster \
          --services ${{ env.PROJECT_NAME }}-backend \
          --region ${{ env.AWS_REGION }}

        echo "Waiting for frontend service to stabilize..."
        aws ecs wait services-stable \
          --cluster ${{ env.PROJECT_NAME }}-cluster \
          --services ${{ env.PROJECT_NAME }}-frontend \
          --region ${{ env.AWS_REGION }}

    - name: Run smoke tests
      run: |
        # Test API health endpoint
        curl -f ${{ steps.terraform-outputs.outputs.application-url }}/api/v1/health
        
        # Test frontend
        curl -f ${{ steps.terraform-outputs.outputs.application-url }}
      timeout-minutes: 5

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: 'üöÄ Successfully deployed DuckDB Analytics to AWS!'
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: '‚ùå Failed to deploy DuckDB Analytics to AWS'
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup old images
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: deploy-aws
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Delete old ECR images
      run: |
        # Keep only the latest 10 images in each repository
        aws ecr list-images --repository-name ${{ env.PROJECT_NAME }}/backend \
          --filter tagStatus=UNTAGGED \
          --query 'imageIds[?imageDigest!=null]' \
          --output json | \
        jq '.[:10]' | \
        aws ecr batch-delete-image --repository-name ${{ env.PROJECT_NAME }}/backend --image-ids file:///dev/stdin || true

        aws ecr list-images --repository-name ${{ env.PROJECT_NAME }}/frontend \
          --filter tagStatus=UNTAGGED \
          --query 'imageIds[?imageDigest!=null]' \
          --output json | \
        jq '.[:10]' | \
        aws ecr batch-delete-image --repository-name ${{ env.PROJECT_NAME }}/frontend --image-ids file:///dev/stdin || true