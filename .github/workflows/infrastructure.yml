name: Infrastructure Management

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      
env:
  AWS_REGION: us-east-1
  PROJECT_NAME: duckdb-analytics

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action || 'plan' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    defaults:
      run:
        working-directory: terraform/aws
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Create terraform.tfvars
      run: |
        cat > terraform.tfvars << EOF
        environment = "${{ github.event.inputs.environment || 'dev' }}"
        project_name = "${{ env.PROJECT_NAME }}"
        aws_region = "${{ env.AWS_REGION }}"
        
        # Conditional settings based on environment
        $(if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
          echo 'auto_scaling = {'
          echo '  min_capacity = 2'
          echo '  max_capacity = 20'
          echo '  target_cpu   = 60'
          echo '}'
          echo 'container_cpu = {'
          echo '  backend  = 1024'
          echo '  frontend = 512'
          echo '}'
          echo 'container_memory = {'
          echo '  backend  = 2048'
          echo '  frontend = 1024'
          echo '}'
          echo 'log_retention_days = 90'
        else
          echo 'auto_scaling = {'
          echo '  min_capacity = 1'
          echo '  max_capacity = 5'
          echo '  target_cpu   = 70'
          echo '}'
          echo 'log_retention_days = 14'
        fi)
        EOF

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
          -backend-config="key=${{ env.PROJECT_NAME }}/${{ github.event.inputs.environment || 'dev' }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}"

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      if: github.event.inputs.action != 'apply' && github.event.inputs.action != 'destroy'
      run: |
        terraform plan \
          -var-file="terraform.tfvars" \
          -out=tfplan \
          -detailed-exitcode
      continue-on-error: true

    - name: Comment PR with Plan
      if: github.event_name == 'pull_request' && github.event.inputs.action != 'apply' && github.event.inputs.action != 'destroy'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const planOutput = fs.readFileSync('terraform/aws/tfplan.txt', 'utf8');
          
          const comment = `## Terraform Plan Results
          
          \`\`\`hcl
          ${planOutput}
          \`\`\`
          
          **Environment:** ${{ github.event.inputs.environment || 'dev' }}
          **Action:** Plan
          **Commit:** ${{ github.sha }}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: |
        terraform apply \
          -var-file="terraform.tfvars" \
          -auto-approve

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        terraform destroy \
          -var-file="terraform.tfvars" \
          -auto-approve

    - name: Upload Terraform Plan
      if: github.event.inputs.action != 'apply' && github.event.inputs.action != 'destroy'
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan-${{ github.event.inputs.environment || 'dev' }}
        path: terraform/aws/tfplan
        retention-days: 30

    - name: Save Terraform Outputs
      if: github.event.inputs.action == 'apply'
      run: |
        terraform output -json > terraform-outputs.json
        
    - name: Upload Terraform Outputs
      if: github.event.inputs.action == 'apply'
      uses: actions/upload-artifact@v3
      with:
        name: terraform-outputs-${{ github.event.inputs.environment || 'dev' }}
        path: terraform/aws/terraform-outputs.json
        retention-days: 90

    - name: Notify Success
      if: success() && github.event.inputs.action == 'apply'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          üèóÔ∏è Infrastructure ${{ github.event.inputs.action }} completed successfully!
          Environment: ${{ github.event.inputs.environment }}
          Project: ${{ env.PROJECT_NAME }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ‚ùå Infrastructure ${{ github.event.inputs.action }} failed!
          Environment: ${{ github.event.inputs.environment }}
          Project: ${{ env.PROJECT_NAME }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}